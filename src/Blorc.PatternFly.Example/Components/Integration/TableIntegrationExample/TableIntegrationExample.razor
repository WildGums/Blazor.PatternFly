@using System.Collections
@using Blorc.PatternFly.Components.Table
@using Blorc.PatternFly.Components.EmptyState
@using Blorc.PatternFly.Components.Title
@using Blorc.PatternFly.Components.Button
@using Blorc.PatternFly.Components.Spinner
@using Blorc.PatternFly.Components.ToggleComponentContainer
@using Blorc.PatternFly.Example.Components.Example
@using Blorc.PatternFly.Components.Pagination


@inherits TableIntegrationExampleComponent

    <ToggleComponentContainer>
        <Table Caption="Data Table" DataSource=@Data>
            <Header>
                <Row>
                    <Column Label="Repositories" Key="Repositories" IsSortable="true" Idx="0" />
                    <Column Label="Branches" Key="Branches" IsSortable="true" Idx="1" />
                    <Column Label="Pull requests" Key="PullRequests" IsSortable="true" Idx="2" />
                    <Column Label="Workspaces" Key="Workspaces" Idx="3" />
                    <Column Label="Last commit" Key="LastCommit" Align="@Align.Center" Idx="4" />
                </Row>
            </Header>
            <NoRowsContent>
                @if (IsLoading)
                {
                    <EmptyState Variant="EmptyStateVariant.Full">
                        <Spinner IsVisible="true" Size="@SpinnerSize.XLarge" />
                        <Title HeadingLevel="h5" Size="lg">
                            Loading
                        </Title>
                    </EmptyState>
                }
                else
                {
                    <EmptyState Variant="EmptyStateVariant.Full">
                        <EmptyStateIcon Icon="Search" />
                        <Title HeadingLevel="h2" Size="lg">
                            No data
                        </Title>
                        <Button Variant="ButtonVariant.Link" OnClick=@((s, e) => Generate())>Generate</Button>
                    </EmptyState>
                }
            </NoRowsContent>
        </Table>
        <Pagination ItemsCount="@Count" PageIndex="@PageIndex" ItemsPerPage="@Limit" ItemsPerPageOptions=@(new[]{5,10,20}) IsDisabled="@(IsLoading || !IsDataAvailable)" OnStateChanged=@(async (s, e)=> await LoadAsync(e.Page, e.Offset, e.Limit)) />
    </ToggleComponentContainer>
