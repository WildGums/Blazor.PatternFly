@page "/components/modal"

@using Blorc.Attributes
@using Blorc.Services
@using Blorc.PatternFly.Components.Modal
@using Blorc.PatternFly.Components.Button
@using Blorc.PatternFly.Components.Container


@inherits BlorcComponentBase

<Metadata ComponentName="Modal" />

<Todo ComponentName="Modal">
    <TodoList>
        - Size customization via style
    </TodoList>
</Todo>

<section class="ws-section ws-live-demo">
    <Example Title="Simple modal">
        <UIModal @ref="_simpleUIModal" ShowCloseButton="true"  CloseButtonPressed=@(async (e,s) => await SimpleUIModal.CloseAsync())>
            <Header>
                Modal Header
            </Header>
            <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est laborum.
            </Body>
            <Footer>
                <Button Variant="ButtonVariant.Secondary" OnClick=@(async (e,s) => await SimpleUIModal.CloseAsync())>Cancel</Button>
                <Button Variant="ButtonVariant.Primary" OnClick=@(async (e,s) => await SimpleUIModal.CloseAsync())>Confirm</Button>
            </Footer>
        </UIModal>
        <Button Variant="ButtonVariant.Primary" OnClick=@(async (e,s) => await SimpleUIModal.ShowAsync())>Show Modal </Button>
    </Example>

    <Example Title="Modal (small)">
	    <UIModal @ref="_smallUIModal" ShowCloseButton="true" Size="ModalSize.Small" CloseButtonPressed=@(async (e,s) => await SmallUIModal.CloseAsync())>
	        <Header>
	            Modal Header
	        </Header>
	        <Body>
	        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore
	        magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
	        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
	        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
	        est laborum.
	        </Body>
	        <Footer>
	            <Button Variant="ButtonVariant.Secondary" OnClick=@(async (s, e)=> await SmallUIModal.CloseAsync())>Cancel
	            </Button>
	            <Button Variant="ButtonVariant.Primary" OnClick=@(async (s, e) => await SmallUIModal.CloseAsync())>Confirm</Button>
	        </Footer>
	    </UIModal>
        <Button Variant="ButtonVariant.Primary" OnClick=@(async (s, e)=> await SmallUIModal.ShowAsync())>Show Small Modal</Button>
    </Example>

    <Example Title="Modal (large)">
        <UIModal @ref="_largeUIModal" ShowCloseButton="true" Size="ModalSize.Large" CloseButtonPressed=@(async (e,s) => await LargeUIModal.CloseAsync())>
            <Header>
                Modal Header
            </Header>
            <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est laborum.
            </Body>
            <Footer>
                <Button Variant="ButtonVariant.Secondary" OnClick=@(async (e,s) => await LargeUIModal.CloseAsync())>Cancel</Button>
                <Button Variant="ButtonVariant.Primary" OnClick=@(async (e,s) => await LargeUIModal.CloseAsync())>Confirm</Button>
            </Footer>
        </UIModal>
        <Button Variant="ButtonVariant.Primary" OnClick=@(async (e,s) => await LargeUIModal.ShowAsync())>Show Large Modal</Button>
    </Example>

    <Example Title="Execute Async Task">
        <PleaseWaitModal Size="ModalSize.Small" Action=@(ctx => DoSomething(ctx)) @ref="_pleaseWaitModal">
            <Header>
                Please wait...
            </Header>
        </PleaseWaitModal>
        <Button Variant="ButtonVariant.Primary" OnClick=@(async (s, e)=> await PleaseWaitModal.ExecuteAsync(true))>
            Show Please Wait
        </Button>
    </Example>

    <Example Title="Execute Async Task (Progress)">
        <PleaseWaitModal @ref="_pleaseWaitModalWithProgress"
                          Size="ModalSize.Small"
                          Action=@(ctx => DoSomething(ctx))
                          ShowProgress="true">
            <Header>
                Please wait...
            </Header>
        </PleaseWaitModal>
        <Button Variant="ButtonVariant.Primary" OnClick=@(async (s, e) => await PleaseWaitModalWithProgress.ExecuteAsync())>Show Please Wait</Button>
    </Example>

    <Example Title="Execute Async Task (Progress & Body)">
        <PleaseWaitModal @ref="_pleaseWaitModalWithProgressAndBody"
                          Size="@ModalSize.Small"
                          Action=@(ctx => DoSomething(ctx))
                          ShowProgress="true">
            <Header>
                Please wait...
            </Header>
            <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore
            magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est laborum.
            </Body>
        </PleaseWaitModal>
        <Button Variant="ButtonVariant.Primary" OnClick=@(async (s, e) => await PleaseWaitModalWithProgressAndBody.ExecuteAsync())>Show Please Wait</Button>
    </Example>
</section>

@code
{
    [InjectComponentService(nameof(SimpleUIModal))]
    private UIModal _simpleUIModal;
    
    [InjectComponentService(nameof(SmallUIModal))]
    private UIModal _smallUIModal;     
    
    [InjectComponentService(nameof(LargeUIModal))]
    private UIModal _largeUIModal;  

    [InjectComponentService(nameof(PleaseWaitModal))]
    private PleaseWaitModal _pleaseWaitModal;

    [InjectComponentService(nameof(PleaseWaitModalWithProgress))]
    private PleaseWaitModal _pleaseWaitModalWithProgress;

    [InjectComponentService(nameof(PleaseWaitModalWithProgressAndBody))]
    private PleaseWaitModal _pleaseWaitModalWithProgressAndBody;
}