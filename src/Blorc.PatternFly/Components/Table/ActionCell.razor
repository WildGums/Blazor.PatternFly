@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Blorc.PatternFly.Components.Dropdown
@using Blorc.PatternFly.Components.Button
@using Blorc.PatternFly.Components.Switch
@using Blorc.PatternFly.Layouts.Split

@inherits BlorcComponentBase

@if (ChildContent != null)
{
    <td data-label="@Label" data-key="@Key" class="pf-c-table__action">
        @ChildContent
    </td>
}
else
{
    var actionDefinitions = ActionDefinitions;
    if (actionDefinitions != null)
    {
        <td data-label="@Label" data-key="@Key" class="pf-c-table__action">
            @if (ActionType == ActionColumnType.Toggle)
            {
                <Dropdown IsPlain="true" Position="@DropdownPosition.Right">
                    <Toggle>
                        <KebabToggle />
                    </Toggle>
                    <Items>
                        @foreach (var actionDefinition in actionDefinitions)
                        {
                            @if (actionDefinition is SeparatorActionDefinition)
                            {
                                <Separator Key="separator" />
                            }
                            else if (actionDefinition is CallActionDefinition callActionDefinition)
                            {
                                <DropdownItem Key="@callActionDefinition.Key" OnClick=@((s, e) => callActionDefinition.Action(DataContext)) IsDisabled="@callActionDefinition.IsDisabled">@callActionDefinition.Label</DropdownItem>
                            }
                            else if (actionDefinition is SwitchActionDefinition switchActionDefinition)
                            {
                                switchActionDefinition.PropertyChanged += (sender, args) =>
                                    {
                                        StateHasChanged();
                                    };
                                <DropdownItem Key="@switchActionDefinition.Key">
                                    <Switch Label=@switchActionDefinition.Label @bind-IsChecked=@switchActionDefinition.IsChecked @bind-IsChecked:event="OnChange" @bind-IsDisbled=@switchActionDefinition.IsDisabled />
                                </DropdownItem>
                            }
                        }
                    </Items>
                </Dropdown>
            }
            else if (ActionType == ActionColumnType.ButtonAndToggle)
            {
                var buttonActionDefinition = actionDefinitions.OfType<CallActionDefinition>().FirstOrDefault();
                <Split IsGutter="true">
                    @if (buttonActionDefinition != null)
                    {
                        <SplitItem IsFilled="true">
                            <Button Variant=@ButtonVariant.Primary OnClick=@((s, e) => buttonActionDefinition.Action(DataContext)) IsDisabled="@buttonActionDefinition.IsDisabled">@buttonActionDefinition.Label</Button>
                        </SplitItem>
                    }
                    <SplitItem>
                        <Dropdown IsPlain="true" Position="@DropdownPosition.Right">
                            <Toggle>
                                <KebabToggle />
                            </Toggle>
                            <Items>
                                @{
                                    var count = 0;
                                    foreach (var actionDefinition in actionDefinitions)
                                    {
                                        if (buttonActionDefinition != actionDefinition)
                                        {
                                            if (actionDefinition is SeparatorActionDefinition && count > 0)
                                            {
                                                count = 0;
                                                <Separator Key="separator" />
                                            }
                                            else if (actionDefinition is CallActionDefinition callActionDefinition)
                                            {
                                                count++;
                                                <DropdownItem Key="@callActionDefinition.Key" OnClick=@((s, e) => callActionDefinition.Action(DataContext)) IsDisabled="@callActionDefinition.IsDisabled">@callActionDefinition.Label</DropdownItem>
                                            }
                                            else if (actionDefinition is SwitchActionDefinition switchActionDefinition)
                                            {
                                                count++;
                                                switchActionDefinition.PropertyChanged += (sender, args) => StateHasChanged();
                                                <DropdownItem Key="@switchActionDefinition.Key">
                                                    <Switch Label=@switchActionDefinition.Label @bind-IsChecked=@switchActionDefinition.IsChecked @bind-IsChecked:event="OnChange" @bind-IsDisbled=@switchActionDefinition.IsDisabled DataContext=@switchActionDefinition />
                                                </DropdownItem>
                                            }
                                        }
                                    }
                                }
                            </Items>
                        </Dropdown>
                    </SplitItem>
                </Split>
            }
            else
            {
                int i = 0;
                <Split IsGutter=@(ActionType == ActionColumnType.GutterButtons)>
                    @foreach (var actionDefinition in actionDefinitions)
                    {
                        if (actionDefinition is CallActionDefinition callActionDefinition)
                        {
                            var buttonVariant = ButtonVariants[Math.Min(ButtonVariants.Length - 1, i++)];
                            <SplitItem>
                                <Button Variant=@buttonVariant OnClick=@((s, e) => callActionDefinition.Action(DataContext)) IsDisabled="@callActionDefinition.IsDisabled">@callActionDefinition.Label</Button>
                            </SplitItem>
                        }
                        else if (actionDefinition is SwitchActionDefinition switchActionDefinition)
                        {
                            switchActionDefinition.PropertyChanged += (sender, args) => StateHasChanged();
                            <SplitItem IsFilled="true">
                                <Switch Label=@switchActionDefinition.Label @bind-IsChecked=@switchActionDefinition.IsChecked @bind-IsChecked:event="OnChange" @bind-IsDisbled=@switchActionDefinition.IsDisabled />
                            </SplitItem>
                        }
                    }
                </Split>
            }
        </td>
    }
}
